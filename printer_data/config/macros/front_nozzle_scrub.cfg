#######################################################################################################################################

# Пример конфигурации макроса для использования в сочетании с модом Decontaminator Purge Bucket & Nozzle Scrubber. Создано Hernsl
# (hernsl#8860 в Discord) и отредактирован Эдвардиком (edwardyeeks#6042 в Discord). Несколько идей, которые сделали его особенностью
# Дейтерий (deutherius#3295 на Discord).

# Цель этого макроса — предоставить процедуру очистки и продувки сопел, которую можно легко скопировать/ссылаться на ваш файл print.cfg.
# Пользователи могут просто изменять параметры и включать/отключать опции в первой половине. Описаний много, поэтому этот макрос
# выглядят огромными, но информативными и расположены в такой последовательности, чтобы их можно было прочитать в первую очередь с описанием строки ниже; ПОЖАЛУЙСТА, ПРОЧИТАЙТЕ ВНИМАТЕЛЬНО.

# В этом примере конфигурации предполагается следующее: Пользователь внедрил модификацию продувочного ведра дезинфицирующего устройства и сопла по умолчанию.
# для VORON 1/2. Его можно настроить в соответствии с индивидуальной геометрией продувочного ведра и щетками.

# Особенности этого макроса: возможность размещения ведра сзади или спереди кровати. Процедура очистки, которую можно включить/выключить.
# По умолчанию ведро расположено сзади слева от станины, и процедура продувки включена. Процедура очистки и очистки рандомизирована.
# в левом или правом ведре, чтобы обеспечить как можно более равномерное распределение остатков нитей.

# Параметры по умолчанию установлены для безопасных скоростей и движений. При необходимости настройте параметры процедуры очистки форсунок.
# чтобы соответствовать вашему принтеру.

# Чтобы избежать увеличения длины строк в вашем основном файле конфигурации принтера.cfg, можно загрузить файл конфигурации отдельно в klipper и
# включите его в основную конфигурацию принтера. Загрузите nozzle_scrub.cfg в тот же каталог, что и файл print.cfg. Обычно он находится в /home/pi/.
# Пользователи Fluidd, Mainsail и других интерфейсов Klipper найдут его в /home/pi/klipper_config/.

# После загрузки добавьте следующее в файл print.cfg в разделе «Макросы»: [include /home/pi/nozzle_scrub.cfg]
# Тем, кто использует Fluidd, Mainsail и другие внешние интерфейсы, необходимо будет вместо этого использовать следующее местоположение:
# [включить /home/pi/klipper_config/nozzle_scrub.cfg]

#######################################################################################################################################

# Имя макроса – clean_nozzle.

[gcode_macro clean_nozzle]

# Если вы размещаете продувочное ведро в задней левой части кровати согласно установке по умолчанию, включите True в переменной location_bucket_rear.
# Если вы хотите разместить чистящее ведро в другом месте (возможно, спереди), установите для него значение False. См. схемы и описание
# ниже о том, как установить положение XY.
variable_location_bucket_rear:      False

# Если вы хотите, чтобы процедура очистки в вашем ведре была включена, установите значение True (и наоборот).
variable_enable_purge:              True

# Если вы хотите включить горячую и холодную очистку, установите значение True (и наоборот).
variable_enable_hotcold:            False


# Эти параметры определяют продувку нити. Переменная retract используется для возврата сразу после очистки, чтобы предотвратить ненужные
# сочится. Некоторые нити особенно жидкие и могут продолжать вытекать из сопла в течение секунды или двух после втягивания.
# Переменная задержки ooze учитывает это. Обновите по мере необходимости. Если вы решили не включать очистку, вы можете игнорировать этот раздел.
variable_purge_len:            15 #20	         ; Количество нити в мм для продувки
variable_purge_spd:           150	         ; Скорость продувки, мм/мин.
variable_purge_temp_min:      200	         ; Минимальная температура сопла, обеспечивающая продувку. В противном случае очистка не произойдет.
variable_purge_ret:             0.5            ; Длина втягивания в мм после продувки, чтобы предотвратить небольшое просачивание. Отрегулируйте по мере необходимости.
variable_ooze_dwell:            0            ; Время задержки/ожидания в секундах после продувки и втягивания.

# Отрегулируйте это так, чтобы насадка чистила щетку. В настоящее время значение по умолчанию намного выше в целях безопасности. Будьте осторожны, не опускайтесь слишком низко!
variable_brush_top:            2.6 #1 
variable_brush_deep_max:       0 #2 #1.5

# Эти параметры определяют чистку, скорость движения, безопасный зазор по оси Z и количество раз, которое вы хотите протереть. Обновите по мере необходимости. Вытирать
# Направление рандомизируется в зависимости от того, случайно ли выбрано левое или правое ведро в процедуре очистки и продувки.
variable_clearance_z:           5	         ; При движении, но не при очистке, зазор по оси Z между соплом и щеткой.
variable_wipe_qty:              3 #5	         ; Количество полных (полная очистка: лево, право, лево ИЛИ право, лево, право) вайпов.
variable_prep_spd_xy:        12000	         ; Скорость перемещения (без очистки) по осям X и Y в мм/мин.
variable_prep_spd_z:         1500	         ; Скорость перемещения (без очистки) по оси Z в мм/мин.
variable_wipe_spd_xy:        5000	         ; Скорость очистки сопла в мм/мин.


# Эти параметры определяют размер кисти. Обновите по мере необходимости. Визуальная ссылка приведена ниже. Обратите внимание, что ориентация
# параметры остаются неизменными независимо от того, находится ли ковш сзади или спереди.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     Если вы выбрали location_bucket_rear = True, позиция Y получается
#  brush_start (x) |                 | brush_depth            из вашего Stepper_y Position_max. Физически отрегулируйте кисть по оси
#                  |_________________|  ↓                               Y, чтобы насадка чистила щетку.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 

## For V2.4 350mm build, uncomment this below:
variable_brush_start:      308 #307

# Это значение по умолчанию определяется местоположением кисти в САПР (сзади слева). Измените, если у вас другая ширина кисти.
variable_brush_width:      35 #40	

## Они используются только в том случае, если location_bucket_rear имеет значение False. Вы указываете произвольное местоположение кисти по оси Y — см. диаграмму выше. ##
variable_brush_front:       -6          
variable_brush_depth:       2 #4          

variable_brush_segments:    20          
        


# Эти параметры определяют размер вашего продувочного ведра. Обновите по мере необходимости. Если вы решили не включать очистку, вы можете игнорировать
# эту секцию. Визуальная ссылка приведена ниже. Обратите внимание, что ориентация параметров остается неизменной, даже если ковш находится сзади
# или спереди.
# 
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
# 

## For V2.4 350mm build, uncomment below
variable_bucket_left_width:    38 
variable_bucket_right_depth:   68




###############################################################################################################################################
###############################################################################################################################################

### С этого момента, если вы не знаете, что делаете, рекомендуется ничего не менять. Не стесняйтесь просмотреть код и связаться со мной.
### (edwardyeeks#6042) в Discord, если заметите какие-либо проблемы!

###############################################################################################################################################
###############################################################################################################################################

# Заполнитель. Позже переменная будет содержать случайное число, обозначающее левый или правый сегмент.
variable_bucket_pos:            1	        

gcode:
   # Сначала проверьте, зафиксированы ли оси.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Сохраните состояние gcode в этом экземпляре макроса.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Check if user enabled purge option or not.
      {% if enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

         G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}

         ## Set purge backoffice
         {% set xmax = printer.toolhead.axis_maximum.x %}
         {% set ymin = printer.toolhead.axis_minimum.y %}
         {% set x_purge_step = bucket_right_depth/5 %}
         {% set y_purge_step = bucket_left_width/3 %}
         {% set brush_purge_X = [ brush_start - 2*y_purge_step , brush_start - y_purge_step, xmax, xmax, xmax, xmax, xmax] %}
         {% set brush_purge_Y = [ ymin , ymin, ymin + x_purge_step, ymin + 2*x_purge_step, ymin + 3*x_purge_step, ymin + 4*x_purge_step, ymin + 5*x_purge_step] %}
         {% set purge_pos = (range(7) | random) %}
         ### Purge is left or right, should prevent unnecessary travel for wipe 
         {% if purge_pos <=2 %} 
            {% set bucket_pos = 0 %}
         {% else %}
            {% set bucket_pos = 1 %}
         {% endif %}

         ### Position for purge. Randomly selects left or right bucket. Lower Z to shorten the length of the purged filament line
         G1 X{brush_purge_X[purge_pos]} Y{brush_purge_Y[purge_pos]} F{prep_spd_xy}
         G1 Z{brush_top - brush_deep_max} F{prep_spd_z}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
         {% endif %}

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

      {% endif %}     

      ## Set wipe backoffice
      {% set brush_step = brush_width / brush_segments %}
      {% set brush_lanes = [ brush_front, brush_front+brush_depth/3, brush_front+brush_depth/3*2, brush_front+brush_depth ] %}
      {% set brush_zhop  = (brush_deep_max) /5 %}
      {% set brush_hops  = [ brush_top, brush_top-brush_zhop, brush_top-brush_zhop*2, brush_top-brush_zhop*3, brush_top-brush_zhop*4, brush_top-brush_zhop*5 ] %}

      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}

      G1 Y{brush_front + (brush_depth / 2)}

      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
   
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      G1 F{wipe_spd_xy}
      SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=True
      {% for wipes in range(1, (wipe_qty + 1)) %}
          {%for segments in range(1, (brush_segments+1)) %} ; go
              _clean_nozzle_move X={brush_start + brush_width*bucket_pos + (1-2*bucket_pos)*brush_step*segments } Y={brush_lanes[range(4)|random]} Z={brush_hops[range(6)|random]}
          {% endfor %}
          {% if wipes < (wipe_qty + 1) %}  ; ignore the last return to avoir picking up filament trash
              {%for segments in range(1, (brush_segments+1)) %} ; return
                  _clean_nozzle_move X={brush_start + brush_width*(1-bucket_pos) - (1-2*bucket_pos)*brush_step*segments } Y={brush_lanes[range(4)|random]} Z={brush_hops[range(6)|random]}
              {% endfor %}
          {% endif %}
          {% if enable_hotcold == True %}
              _clean_nozzle_cooldown_check
          {% endif %}
      {% endfor %}

   
      ## Clear from area.
      M117 Очищено!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G90
      G1 X{brush_start - 20 } F{prep_spd_xy} 

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle MOVE=1 MOVE_SPEED=150

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Припаркуйте оси!

   {% endif %}


###############################################################################################################################################
###############################################################################################################################################

[gcode_macro _clean_nozzle_move]
variable_move: True
gcode:
    
    {% if move == True %}
          {% set x = params.X %}
          {% set y = params.Y %}
          {% set z = params.Z %}
          G1 X{x} Y{y} Z{z}
    {% endif %}

[gcode_macro  _clean_nozzle_cooldown_check]
gcode:
  {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
  {% set extruder_target = printer[printer.toolhead.extruder].target %}
  {% if extruder_temperature <= extruder_target %}
        SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=False
  {% endif %}

###############################################################################################################################################
###############################################################################################################################################

[gcode_macro CLEAN_HOTCOLD]
variable_temperature_offset:   30
variable_temperature_dwell:     5

gcode:
    {% set extruder_target = printer[printer.toolhead.extruder].target %}
    {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
    #{% set cooltemp_target = extruder_target - temperature_offset %}
    {% set cooltemp_target = 180 %}
    {% set min_extrude_temp = printer.configfile.settings.extruder.min_extrude_temp %}
    {% if extruder_target >= min_extrude_temp and extruder_temperature >= min_extrude_temp %}
        SAVE_GCODE_STATE NAME=STATE_CLEAN
        SET_GCODE_OFFSET Z=0.0                                                        ; reset the G-Code Z offset (adjust Z offset if needed)
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=100            ; do enough wipes so the nozzle has time to cool down
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=False      ; no purge
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_hotcold VALUE=True     ; hot to cold cleaning
        M109 S{extruder_target}                                                       ; wait for extruder to reach the target temperature
        M104 S{cooltemp_target}                                                       ; cool down during wipes to prevent oozing after wipes
        M106 S256                                                                     ; set fan speed to max to help cooling
        G4 P{temperature_dwell * 1000}                                                               ; dwell time to spare nozzle a bit
        CLEAN_NOZZLE                                                                  ; start cleaning
        M106 S0                                                                       ; stop part cooling fan
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_hotcold VALUE=False    ; hot to cold cleaning off
        RESTORE_GCODE_STATE NAME=STATE_CLEAN
    {% endif %}

[gcode_macro CLEAN_PURGE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=5
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=100
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro CLEAN_PRIME]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=5
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=5
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro CLEAN_NOPURGE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=3
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=False
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN